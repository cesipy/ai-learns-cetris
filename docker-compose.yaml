services: 
# expert_counter = 100
  experiment_1: 
    build: 
      context: .
      dockerfile: Dockerfile
    image: ai-learns-tetris
    # special case for my tetris implementation, from gpt. 
    # currently no visuals
    tty: true          # Allocates a pseudo-TTY
    stdin_open: true   # Keeps stdin open
    environment:
      - TERM=xterm 


# expert_counter = 1
# 2 amount of pieces
  experiment_2:
    build: 
      context: .
      dockerfile: Dockerfile
    image: ai-learns-tetris
    # special case for my tetris implementation, from gpt. 
    # currently no visuals
    tty: true          # Allocates a pseudo-TTY
    stdin_open: true   # Keeps stdin open
    environment:
      - TERM=xterm     

# expert_counter = 3,  2 AMOUNT_OF_PIECES
  experiment_3: 
    build: 
      context: .
      dockerfile: Dockerfile
    image: ai-learns-tetris
    # special case for my tetris implementation, from gpt. 
    # currently no visuals
    tty: true          # Allocates a pseudo-TTY
    stdin_open: true   # Keeps stdin open
    environment:
      - TERM=xterm     
  
# expert_counter = 1,  7 AMOUNT_OF_PIECES
  experiment_4: 
    build: 
      context: .
      dockerfile: Dockerfile
    image: ai-learns-tetris
    # special case for my tetris implementation, from gpt. 
    # currently no visuals
    tty: true          # Allocates a pseudo-TTY
    stdin_open: true   # Keeps stdin open
    environment:
      - TERM=xterm

  # new reward function with height diff and variance.
  # expert counter= 30
  # deterministic and only 2 piece types
  experiment_5: 
    build: 
      context: .
      dockerfile: Dockerfile
    image: ai-learns-tetris
    # special case for my tetris implementation, from gpt. 
    # currently no visuals
    tty: true          # Allocates a pseudo-TTY
    stdin_open: true   # Keeps stdin open
    environment:
      - TERM=xterm     

  # new reward function with height diff and variance, but less game over penalty. 
  # expert counter= 30
  # deterministic and only 2 piece types
  experiment_6: 
    build: 
      context: .
      dockerfile: Dockerfile
    image: ai-learns-tetris
    # special case for my tetris implementation, from gpt. 
    # currently no visuals
    tty: true          # Allocates a pseudo-TTY
    stdin_open: true   # Keeps stdin open
    environment:
      - TERM=xterm     


  # new reward function with height diff and variance, but less game over penalty. 
  # expert counter= 1
  # deterministic and only 2 piece types
  experiment_7: 
    build: 
      context: .
      dockerfile: Dockerfile
    image: ai-learns-tetris
    # special case for my tetris implementation, from gpt. 
    # currently no visuals
    tty: true          # Allocates a pseudo-TTY
    stdin_open: true   # Keeps stdin open
    environment:
      - TERM=xterm     